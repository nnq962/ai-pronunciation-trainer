from flask import Flask, render_template, request, jsonify
import webbrowser
import os
from flask_cors import CORS
import json
import uuid

import lambdaTTS
import lambdaSpeechToScore
import lambdaGetSample
from mp3_to_base64Audio import process_audio_file_in_memory
from urllib.parse import urlparse
import re

app = Flask(__name__)
cors = CORS(app)
app.config['CORS_HEADERS'] = '*'

rootPath = ''
results = {}  # Dictionary l∆∞u tr·ªØ k·∫øt qu·∫£ t·∫°m th·ªùi

# ----------------------------------------------------------------
def process_words_with_colors(real_transcripts, ipa_transcript, is_letter_correct_all_words):
    # T√°ch c√°c t·ª´ v√† c√°c tr·∫°ng th√°i t·ª´ is_letter_correct_all_words
    real_transcripts_words = real_transcripts.split(" ")
    ipa_transcript_words = ipa_transcript.split(" ")
    letters_correct_status = is_letter_correct_all_words.split(" ")

    # T·∫°o danh s√°ch ch·ª©a HTML cho t·ª´ng t·ª´
    colored_words = []

    # L·∫∑p qua t·ª´ng t·ª´
    for word_idx, real_word in enumerate(real_transcripts_words):
        # N·∫øu v∆∞·ª£t qu√° tr·∫°ng th√°i ƒë∆∞·ª£c cung c·∫•p, b·ªè qua t·ª´
        if word_idx >= len(letters_correct_status):
            colored_words.append(real_word)
            continue

        # L·∫•y tr·∫°ng th√°i ch·ªØ c√°i c·ªßa t·ª´ hi·ªán t·∫°i
        letter_status = letters_correct_status[word_idx]
        word_html = ""

        # L·∫∑p qua t·ª´ng ch·ªØ c√°i
        for letter_idx, letter in enumerate(real_word):
            if letter_idx < len(letter_status) and letter_status[letter_idx] == "1":
                # N·∫øu ch·ªØ c√°i ƒë√∫ng, t√¥ m√†u xanh
                word_html += f'<span style="color: green;">{letter}</span>'
            else:
                # N·∫øu ch·ªØ c√°i sai, t√¥ m√†u ƒë·ªè
                word_html += f'<span style="color: red;">{letter}</span>'

        # Th√™m t·ª´ v√†o danh s√°ch
        colored_words.append(word_html)

    # Gh√©p danh s√°ch l·∫°i th√†nh chu·ªói HTML
    return " ".join(colored_words)

# ----------------------------------------------------------------
def highlight_partial_mismatches(real_transcripts_ipa, matched_transcripts_ipa):
    real_syllables = real_transcripts_ipa.split()
    matched_syllables = matched_transcripts_ipa.split()

    formatted_output = []
    matched_index = 0
    len_matched = len(matched_syllables)

    print("\nProcessing Partial Mismatches:")
    print(f"Real IPA: {real_syllables}")
    print(f"Matched IPA: {matched_syllables}")

    for real_syllable in real_syllables:
        if matched_index < len_matched:
            matched_syllable = matched_syllables[matched_index]

            if real_syllable == matched_syllable:
                # √Çm ti·∫øt ƒë√∫ng, kh√¥ng b√¥i m√†u
                formatted_output.append(real_syllable)
            else:
                # So s√°nh t·ª´ng k√Ω t·ª± ƒë·ªÉ t√¨m l·ªói c·ª• th·ªÉ
                highlighted_syllable = []
                min_len = min(len(real_syllable), len(matched_syllable))

                for i in range(min_len):
                    if real_syllable[i] == matched_syllable[i]:
                        highlighted_syllable.append(real_syllable[i])
                    else:
                        highlighted_syllable.append(f'<span class="highlight-red">{real_syllable[i]}</span>')

                # N·∫øu t·ª´ th·ª±c t·∫ø d√†i h∆°n, ph·∫ßn th·ª´a c≈©ng b√¥i ƒë·ªè
                if len(real_syllable) > len(matched_syllable):
                    extra_part = real_syllable[min_len:]
                    highlighted_syllable.append(f'<span class="highlight-red">{extra_part}</span>')

                formatted_output.append("".join(highlighted_syllable))

                print(f" - Partial mismatch: '{real_syllable}' vs '{matched_syllable}', highlighted -> {''.join(highlighted_syllable)}")

            matched_index += 1
        else:
            # √Çm ti·∫øt ho√†n to√†n thi·∫øu, b√¥i ƒë·ªè to√†n b·ªô
            formatted_output.append(f'<span class="highlight-red">{real_syllable}</span>')
            print(f" - Completely missing syllable '{real_syllable}' marked as red")

    return " ".join(formatted_output)

# ----------------------------------------------------------------
def highlight_extra_syllables(real_transcripts_ipa, matched_transcripts_ipa):
    real_syllables = real_transcripts_ipa.split()
    matched_syllables = matched_transcripts_ipa.split()

    formatted_output = []
    real_index = 0
    len_real = len(real_syllables)
    len_matched = len(matched_syllables)

    print("\nProcessing Extra Syllables:")
    print(f"Real IPA: {real_syllables}")
    print(f"Transcript IPA: {matched_syllables}")

    for matched_index, matched_syllable in enumerate(matched_syllables):
        if real_index < len_real and matched_syllable == real_syllables[real_index]:
            # N·∫øu √¢m ti·∫øt kh·ªõp, gi·ªØ nguy√™n v√† ti·∫øn t·ªõi √¢m ti·∫øt ti·∫øp theo
            formatted_output.append(matched_syllable)
            real_index += 1
        else:
            # Ki·ªÉm tra xem √¢m ti·∫øt trong Matched IPA c√≥ xu·∫•t hi·ªán mu·ªôn h∆°n trong Real IPA kh√¥ng
            found_later = False
            for search_index in range(real_index + 1, len_real):
                if matched_syllable == real_syllables[search_index]:
                    # N·∫øu t√¨m th·∫•y kh·ªõp mu·ªôn h∆°n, gi·ªØ nguy√™n
                    found_later = True
                    break
            
            if found_later:
                formatted_output.append(matched_syllable)  # Gi·ªØ nguy√™n, kh√¥ng b√¥i v√†ng
                real_index += 1  # D·ªãch v·ªã tr√≠ real_index t·ªõi v·ªã tr√≠ m·ªõi
            else:
                # N·∫øu kh√¥ng t√¨m th·∫•y trong danh s√°ch sau, ƒë√°nh d·∫•u l√† th·ª´a (b√¥i v√†ng)
                formatted_output.append(f'<span class="highlight-yellow">{matched_syllable}</span>')
                print(f" - Extra syllable '{matched_syllable}' marked as yellow")

    return " ".join(formatted_output)

# ----------------------------------------------------------------
def is_small_diff(a: str, b: str) -> bool:
    """
    Ki·ªÉm tra xem hai t·ª´ c√≥ s·ª± kh√°c bi·ªát nh·ªè kh√¥ng.
    - N·∫øu ch·ªâ kh√°c nhau 1 k√Ω t·ª± ‚Üí True.
    - N·∫øu m·ªôt t·ª´ ch·ªâ thi·∫øu ho·∫∑c th·ª´a ƒë√∫ng 1 k√Ω t·ª± so v·ªõi t·ª´ kia ‚Üí True.
    - N·∫øu kh√°c nhau qu√° nhi·ªÅu ‚Üí False.
    """
    if a == b:
        return False  # Kh√¥ng kh√°c bi·ªát g√¨

    # N·∫øu ƒë·ªô d√†i kh√°c nhau qu√° nhi·ªÅu, kh√¥ng th·ªÉ l√† l·ªói nh·ªè
    if abs(len(a) - len(b)) > 1:
        return False

    # N·∫øu m·ªôt t·ª´ l√† ti·ªÅn t·ªë c·ªßa t·ª´ c√≤n l·∫°i (ch·ªâ thi·∫øu 1 k√Ω t·ª±)
    if len(a) < len(b) and b.startswith(a):
        return True
    if len(b) < len(a) and a.startswith(b):
        return True

    # Ki·ªÉm tra s·ªë k√Ω t·ª± kh√°c bi·ªát
    diff_count = sum(1 for x, y in zip(a, b) if x != y)

    # N·∫øu kh√°c nhau ƒë√∫ng 1 k√Ω t·ª±, coi l√† "small diff"
    return diff_count == 1

# ----------------------------------------------------------------
def is_partial_match(a: str, b: str) -> bool:
    """
    Ki·ªÉm tra xem hai t·ª´ c√≥ s·ª± kh√°c bi·ªát nh·ªè kh√¥ng.
    - N·∫øu ch·ªâ kh√°c nhau s·ªë k√Ω t·ª± trong kho·∫£ng cho ph√©p (t√≠nh to√°n d·ª±a tr√™n ƒë·ªô d√†i t·ª´) ‚Üí True.
    - N·∫øu kh√°c qu√° nhi·ªÅu ‚Üí False.
    """
    if a == b:
        return False  # Kh√¥ng kh√°c bi·ªát g√¨

    # T√≠nh to√°n ng∆∞·ª°ng cho ph√©p sai s·ªë d·ª±a tr√™n ƒë·ªô d√†i t·ª´
    max_diff = max(1, round(min(len(a), len(b)) * 0.3))  # Cho ph√©p sai kho·∫£ng 30% ƒë·ªô d√†i t·ª´

    # N·∫øu ƒë·ªô d√†i kh√°c nhau qu√° nhi·ªÅu, kh√¥ng th·ªÉ l√† l·ªói nh·ªè
    if abs(len(a) - len(b)) > max_diff:
        return False

    # N·∫øu m·ªôt t·ª´ l√† ti·ªÅn t·ªë c·ªßa t·ª´ c√≤n l·∫°i (ch·ªâ thi·∫øu/th·ª´a m·ªôt s·ªë k√Ω t·ª± nh·ªè)
    if len(a) < len(b) and b.startswith(a):
        return True
    if len(b) < len(a) and a.startswith(b):
        return True

    # Ki·ªÉm tra s·ªë k√Ω t·ª± kh√°c bi·ªát
    diff_count = sum(1 for x, y in zip(a, b) if x != y)

    # N·∫øu kh√°c nhau t·ªëi ƒëa `max_diff` k√Ω t·ª±, coi l√† "partial match"
    return diff_count <= max_diff

# ----------------------------------------------------------------
def highlight_partial_extra_syllables(real_word: str, matched_word: str) -> str:
    """
    So s√°nh t·ª´ng k√Ω t·ª± v√† ch·ªâ b√¥i v√†ng nh·ªØng k√Ω t·ª± sai thay v√¨ b√¥i v√†ng to√†n b·ªô t·ª´.
    Kh√¥ng t·ª± ƒë·ªông th√™m k√Ω t·ª± b·ªã thi·∫øu m√† ch·ªâ b√¥i v√†ng c√°c k√Ω t·ª± c√≥ trong matched_word.
    """
    output = []
    min_len = min(len(real_word), len(matched_word))

    for i in range(min_len):
        if real_word[i] == matched_word[i]:
            output.append(matched_word[i])
        else:
            output.append(f'<span class="highlight-yellow">{matched_word[i]}</span>')

    # N·∫øu t·ª´ c√≥ th√™m k√Ω t·ª± (d√†i h∆°n real_word), b√¥i v√†ng ph·∫ßn th·ª´a
    if len(matched_word) > len(real_word):
        extra = matched_word[len(real_word):]
        output.append(f'<span class="highlight-yellow">{extra}</span>')

    return "".join(output)

# ----------------------------------------------------------------
def refine_yellow_highlights(real_transcripts_ipa: str, highlighted: str):                
    """
    - Ki·ªÉm tra l·∫°i c√°c t·ª´ b·ªã b√¥i v√†ng:
        - N·∫øu t·ª´ ch·ªâ sai m·ªôt k√Ω t·ª±, ch·ªâ b√¥i v√†ng ph·∫ßn sai.
        - N·∫øu t·ª´ th·ª±c s·ª± sai ho√†n to√†n, gi·ªØ nguy√™n b√¥i v√†ng.
    - Tr·∫£ v·ªÅ refined_highlighted v√† s·ªë t·ª´ th·ª´a ho√†n to√†n.
    """
    real_syllables = real_transcripts_ipa.split()
    
    # T√¨m t·∫•t c·∫£ c√°c t·ª´ b·ªã b√¥i v√†ng trong highlighted_ipa
    yellow_words = re.findall(r'<span class="highlight-yellow">(.*?)</span>', highlighted)
    
    # N·∫øu kh√¥ng c√≥ t·ª´ b√¥i v√†ng, tr·∫£ v·ªÅ lu√¥n
    if not yellow_words:
        return highlighted, 0

    print("\nüîé Debug: T·ª´ ƒëang b·ªã b√¥i v√†ng:", yellow_words)

    refined_highlighted = highlighted
    corrected_count = 0  # Bi·∫øn ƒë·∫øm s·ªë t·ª´ ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a th√†nh g·∫ßn ƒë√∫ng

    for yellow_word in yellow_words:
        print(f"\nüîç Checking word: '{yellow_word}'")
        
        # Ki·ªÉm tra xem t·ª´ n√†y c√≥ xu·∫•t hi·ªán trong real_syllables kh√¥ng
        best_match = None
        for real_word in real_syllables:
            if is_partial_match(yellow_word, real_word):
                best_match = real_word
                break  # Ch·ªâ l·∫•y t·ª´ ƒë·∫ßu ti√™n kh·ªõp g·∫ßn ƒë√∫ng

        if best_match:
            # N·∫øu ch·ªâ sai m·ªôt ph·∫ßn, b√¥i v√†ng ph·∫ßn sai thay v√¨ b·ªè b√¥i v√†ng to√†n b·ªô
            refined_word = highlight_partial_extra_syllables(best_match, yellow_word)
            refined_highlighted = refined_highlighted.replace(
                f'<span class="highlight-yellow">{yellow_word}</span>', refined_word, 1
            )
            corrected_count += 1
            print(f"‚úÖ '{yellow_word}' has small differences with '{best_match}', applying partial highlight.")
        else:
            print(f"‚ùå '{yellow_word}' is completely extra and counted.")

    # T√≠nh to√°n s·ªë t·ª´ th·ª±c s·ª± th·ª´a
    extra_count = len(yellow_words) - corrected_count
    print(f"\nüî¢ Final extra word count: {extra_count}")
    
    return refined_highlighted, extra_count

# ----------------------------------------------------------------
def is_valid_url(url):
    """Ki·ªÉm tra xem chu·ªói c√≥ ph·∫£i l√† URL h·ª£p l·ªá kh√¥ng."""
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except ValueError:
        return False

# ----------------------------------------------------------------
@app.route(rootPath+'/')
def main():
    return render_template('main.html')

# ----------------------------------------------------------------
@app.route(rootPath+'/getAudioFromText', methods=['POST'])
def getAudioFromText():
    event = {'body': json.dumps(request.get_json(force=True))}
    return lambdaTTS.lambda_handler(event, [])

# ----------------------------------------------------------------
@app.route(rootPath+'/getSample', methods=['POST'])
def getNext():
    event = {'body':  json.dumps(request.get_json(force=True))}
    return lambdaGetSample.lambda_handler(event, [])

# ----------------------------------------------------------------
@app.route(rootPath+'/GetAccuracyFromRecordedAudio', methods=['POST'])
def GetAccuracyFromRecordedAudio():

    try:
        event = {'body': json.dumps(request.get_json(force=True))}
        lambda_correct_output = lambdaSpeechToScore.lambda_handler(event, [])
    except Exception as e:
        print('Error: ', str(e))
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Headers': '*',
                'Access-Control-Allow-Credentials': "true",
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
            },
            'body': ''
        }

    # L∆∞u k·∫øt qu·∫£ ƒë·∫ßy ƒë·ªß v√†o `results`
    results["data"] = lambda_correct_output

    return lambda_correct_output

# ----------------------------------------------------------------
@app.route(rootPath + '/view')
def view_result():
    try:
        # L·∫•y k·∫øt qu·∫£ d·ª±a tr√™n UUID
        result = results.get("data")
        print("-" * 80)
        print(results)
        print()
        print(result)
        if not result:
            return "Result not found or expired.", 404

        # N·∫øu k·∫øt qu·∫£ l√† chu·ªói JSON, chuy·ªÉn th√†nh dictionary
        if isinstance(result, str):
            result = json.loads(result)

        # Tr√≠ch xu·∫•t th√¥ng tin c·∫ßn thi·∫øt
        real_transcripts = result.get("real_transcripts")
        ipa_transcript = result.get("ipa_transcript")
        real_transcripts_ipa = result.get("real_transcripts_ipa")
        matched_transcripts_ipa = result.get("matched_transcripts_ipa")
        is_letter_correct_all_words = result.get("is_letter_correct_all_words")
        pronunciation_accuracy = result.get("pronunciation_accuracy")
        pair_accuracy_category = result.get("pair_accuracy_category")

        if not result:
            return "No pronunciation data available.", 404

        colored_words = process_words_with_colors(real_transcripts, ipa_transcript, is_letter_correct_all_words)
        corrected_ipa = highlight_partial_mismatches(real_transcripts_ipa, matched_transcripts_ipa)
        highlighted_ipa = highlight_extra_syllables(real_transcripts_ipa, ipa_transcript)
        refined_ipa, extra_word_count = refine_yellow_highlights(real_transcripts_ipa, highlighted_ipa)

        print("-" * 80)
        print("Original pronunciation_accuracy:", pronunciation_accuracy)

        pronunciation_accuracy = int(pronunciation_accuracy)
        adjusted_score = max(pronunciation_accuracy - (extra_word_count * 10), 0)

        print("-" * 80)

        # Hi·ªÉn th·ªã giao di·ªán v·ªõi d·ªØ li·ªáu
        return render_template(
            "result.html",
            colored_words=colored_words,
            corrected_ipa=corrected_ipa,
            highlighted_ipa=refined_ipa,
            pronunciation_accuracy=adjusted_score
        )
    
    except Exception as e:
        print(f"Error occurred: {e}")  # Log l·ªói chi ti·∫øt
        return f"Internal Server Error: {e}", 500

if __name__ == "__main__":
    language = 'en'
    print(os.system('pwd'))
    # webbrowser.open_new('http://127.0.0.1:3000/')
    app.run(host="0.0.0.0", port=3000, debug=True)
